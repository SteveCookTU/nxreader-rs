// automatically generated by the FlatBuffers compiler, do not modify

extern crate flatbuffers;

#[allow(unused_imports, dead_code)]
pub mod structure {

    use std::cmp::Ordering;
    use std::mem;

    extern crate flatbuffers;
    use self::flatbuffers::{EndianScalar, Follow};

    pub enum EncounterNest8ArchiveOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct EncounterNest8Archive<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> Follow<'a> for EncounterNest8Archive<'a> {
        type Inner = EncounterNest8Archive<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> EncounterNest8Archive<'a> {
        pub const VT_TABLES: flatbuffers::VOffsetT = 4;

        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            EncounterNest8Archive { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args EncounterNest8ArchiveArgs<'args>,
        ) -> flatbuffers::WIPOffset<EncounterNest8Archive<'bldr>> {
            let mut builder = EncounterNest8ArchiveBuilder::new(_fbb);
            if let Some(x) = args.tables {
                builder.add_tables(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn tables(
            &self,
        ) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<EncounterNest8Table<'a>>>>
        {
            self._tab.get::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<EncounterNest8Table>>,
            >>(EncounterNest8Archive::VT_TABLES, None)
        }
    }

    impl flatbuffers::Verifiable for EncounterNest8Archive<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<
                    flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<EncounterNest8Table>>,
                >>("tables", Self::VT_TABLES, false)?
                .finish();
            Ok(())
        }
    }
    pub struct EncounterNest8ArchiveArgs<'a> {
        pub tables: Option<
            flatbuffers::WIPOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<EncounterNest8Table<'a>>>,
            >,
        >,
    }
    impl<'a> Default for EncounterNest8ArchiveArgs<'a> {
        #[inline]
        fn default() -> Self {
            EncounterNest8ArchiveArgs { tables: None }
        }
    }

    pub struct EncounterNest8ArchiveBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> EncounterNest8ArchiveBuilder<'a, 'b> {
        #[inline]
        pub fn add_tables(
            &mut self,
            tables: flatbuffers::WIPOffset<
                flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<EncounterNest8Table<'b>>>,
            >,
        ) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
                EncounterNest8Archive::VT_TABLES,
                tables,
            );
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        ) -> EncounterNest8ArchiveBuilder<'a, 'b> {
            let start = _fbb.start_table();
            EncounterNest8ArchiveBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<EncounterNest8Archive<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for EncounterNest8Archive<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("EncounterNest8Archive");
            ds.field("tables", &self.tables());
            ds.finish()
        }
    }
    pub enum EncounterNest8TableOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct EncounterNest8Table<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for EncounterNest8Table<'a> {
        type Inner = EncounterNest8Table<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> EncounterNest8Table<'a> {
        pub const VT_TABLE_ID: flatbuffers::VOffsetT = 4;
        pub const VT_GAME_VERSION: flatbuffers::VOffsetT = 6;
        pub const VT_ENTRIES: flatbuffers::VOffsetT = 8;

        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            EncounterNest8Table { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args EncounterNest8TableArgs<'args>,
        ) -> flatbuffers::WIPOffset<EncounterNest8Table<'bldr>> {
            let mut builder = EncounterNest8TableBuilder::new(_fbb);
            builder.add_table_id(args.table_id);
            if let Some(x) = args.entries {
                builder.add_entries(x);
            }
            builder.add_game_version(args.game_version);
            builder.finish()
        }

        #[inline]
        pub fn table_id(&self) -> u64 {
            self._tab
                .get::<u64>(EncounterNest8Table::VT_TABLE_ID, Some(0))
                .unwrap()
        }
        #[inline]
        pub fn game_version(&self) -> u32 {
            self._tab
                .get::<u32>(EncounterNest8Table::VT_GAME_VERSION, Some(0))
                .unwrap()
        }
        #[inline]
        pub fn entries(
            &self,
        ) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<EncounterNest8<'a>>>>
        {
            self._tab.get::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<EncounterNest8>>,
            >>(EncounterNest8Table::VT_ENTRIES, None)
        }
    }

    impl flatbuffers::Verifiable for EncounterNest8Table<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<u64>("table_id", Self::VT_TABLE_ID, false)?
                .visit_field::<u32>("game_version", Self::VT_GAME_VERSION, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<
                    flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<EncounterNest8>>,
                >>("entries", Self::VT_ENTRIES, false)?
                .finish();
            Ok(())
        }
    }
    pub struct EncounterNest8TableArgs<'a> {
        pub table_id: u64,
        pub game_version: u32,
        pub entries: Option<
            flatbuffers::WIPOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<EncounterNest8<'a>>>,
            >,
        >,
    }
    impl<'a> Default for EncounterNest8TableArgs<'a> {
        #[inline]
        fn default() -> Self {
            EncounterNest8TableArgs {
                table_id: 0,
                game_version: 0,
                entries: None,
            }
        }
    }

    pub struct EncounterNest8TableBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> EncounterNest8TableBuilder<'a, 'b> {
        #[inline]
        pub fn add_table_id(&mut self, table_id: u64) {
            self.fbb_
                .push_slot::<u64>(EncounterNest8Table::VT_TABLE_ID, table_id, 0);
        }
        #[inline]
        pub fn add_game_version(&mut self, game_version: u32) {
            self.fbb_
                .push_slot::<u32>(EncounterNest8Table::VT_GAME_VERSION, game_version, 0);
        }
        #[inline]
        pub fn add_entries(
            &mut self,
            entries: flatbuffers::WIPOffset<
                flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<EncounterNest8<'b>>>,
            >,
        ) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
                EncounterNest8Table::VT_ENTRIES,
                entries,
            );
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        ) -> EncounterNest8TableBuilder<'a, 'b> {
            let start = _fbb.start_table();
            EncounterNest8TableBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<EncounterNest8Table<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for EncounterNest8Table<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("EncounterNest8Table");
            ds.field("table_id", &self.table_id());
            ds.field("game_version", &self.game_version());
            ds.field("entries", &self.entries());
            ds.finish()
        }
    }
    pub enum EncounterNest8Offset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct EncounterNest8<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> Follow<'a> for EncounterNest8<'a> {
        type Inner = EncounterNest8<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> EncounterNest8<'a> {
        pub const VT_ENTRY_INDEX: flatbuffers::VOffsetT = 4;
        pub const VT_SPECIES: flatbuffers::VOffsetT = 6;
        pub const VT_ALT_FORM: flatbuffers::VOffsetT = 8;
        pub const VT_LEVEL_TABLE_ID: flatbuffers::VOffsetT = 10;
        pub const VT_ABILITY: flatbuffers::VOffsetT = 12;
        pub const VT_IS_GIGANTAMAX: flatbuffers::VOffsetT = 14;
        pub const VT_DROP_TABLE_ID: flatbuffers::VOffsetT = 16;
        pub const VT_BONUS_TABLE_ID: flatbuffers::VOffsetT = 18;
        pub const VT_PROBABILITIES: flatbuffers::VOffsetT = 20;
        pub const VT_GENDER: flatbuffers::VOffsetT = 22;
        pub const VT_FLAWLESS_IVS: flatbuffers::VOffsetT = 24;

        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            EncounterNest8 { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args EncounterNest8Args<'args>,
        ) -> flatbuffers::WIPOffset<EncounterNest8<'bldr>> {
            let mut builder = EncounterNest8Builder::new(_fbb);
            builder.add_bonus_table_id(args.bonus_table_id);
            builder.add_drop_table_id(args.drop_table_id);
            builder.add_level_table_id(args.level_table_id);
            if let Some(x) = args.probabilities {
                builder.add_probabilities(x);
            }
            builder.add_alt_form(args.alt_form);
            builder.add_species(args.species);
            builder.add_entry_index(args.entry_index);
            builder.add_flawless_ivs(args.flawless_ivs);
            builder.add_gender(args.gender);
            builder.add_is_gigantamax(args.is_gigantamax);
            builder.add_ability(args.ability);
            builder.finish()
        }

        #[inline]
        pub fn entry_index(&self) -> u32 {
            self._tab
                .get::<u32>(EncounterNest8::VT_ENTRY_INDEX, Some(0))
                .unwrap()
        }
        #[inline]
        pub fn species(&self) -> u32 {
            self._tab
                .get::<u32>(EncounterNest8::VT_SPECIES, Some(0))
                .unwrap()
        }
        #[inline]
        pub fn alt_form(&self) -> u32 {
            self._tab
                .get::<u32>(EncounterNest8::VT_ALT_FORM, Some(0))
                .unwrap()
        }
        #[inline]
        pub fn level_table_id(&self) -> u64 {
            self._tab
                .get::<u64>(EncounterNest8::VT_LEVEL_TABLE_ID, Some(0))
                .unwrap()
        }
        #[inline]
        pub fn ability(&self) -> i8 {
            self._tab
                .get::<i8>(EncounterNest8::VT_ABILITY, Some(0))
                .unwrap()
        }
        #[inline]
        pub fn is_gigantamax(&self) -> bool {
            self._tab
                .get::<bool>(EncounterNest8::VT_IS_GIGANTAMAX, Some(false))
                .unwrap()
        }
        #[inline]
        pub fn drop_table_id(&self) -> u64 {
            self._tab
                .get::<u64>(EncounterNest8::VT_DROP_TABLE_ID, Some(0))
                .unwrap()
        }
        #[inline]
        pub fn bonus_table_id(&self) -> u64 {
            self._tab
                .get::<u64>(EncounterNest8::VT_BONUS_TABLE_ID, Some(0))
                .unwrap()
        }
        #[inline]
        pub fn probabilities(&self) -> Option<flatbuffers::Vector<'a, u32>> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(
                    EncounterNest8::VT_PROBABILITIES,
                    None,
                )
        }
        #[inline]
        pub fn gender(&self) -> i8 {
            self._tab
                .get::<i8>(EncounterNest8::VT_GENDER, Some(0))
                .unwrap()
        }
        #[inline]
        pub fn flawless_ivs(&self) -> i8 {
            self._tab
                .get::<i8>(EncounterNest8::VT_FLAWLESS_IVS, Some(0))
                .unwrap()
        }
    }

    impl flatbuffers::Verifiable for EncounterNest8<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<u32>("entry_index", Self::VT_ENTRY_INDEX, false)?
                .visit_field::<u32>("species", Self::VT_SPECIES, false)?
                .visit_field::<u32>("alt_form", Self::VT_ALT_FORM, false)?
                .visit_field::<u64>("level_table_id", Self::VT_LEVEL_TABLE_ID, false)?
                .visit_field::<i8>("ability", Self::VT_ABILITY, false)?
                .visit_field::<bool>("is_gigantamax", Self::VT_IS_GIGANTAMAX, false)?
                .visit_field::<u64>("drop_table_id", Self::VT_DROP_TABLE_ID, false)?
                .visit_field::<u64>("bonus_table_id", Self::VT_BONUS_TABLE_ID, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>(
                    "probabilities",
                    Self::VT_PROBABILITIES,
                    false,
                )?
                .visit_field::<i8>("gender", Self::VT_GENDER, false)?
                .visit_field::<i8>("flawless_ivs", Self::VT_FLAWLESS_IVS, false)?
                .finish();
            Ok(())
        }
    }
    pub struct EncounterNest8Args<'a> {
        pub entry_index: u32,
        pub species: u32,
        pub alt_form: u32,
        pub level_table_id: u64,
        pub ability: i8,
        pub is_gigantamax: bool,
        pub drop_table_id: u64,
        pub bonus_table_id: u64,
        pub probabilities: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
        pub gender: i8,
        pub flawless_ivs: i8,
    }
    impl<'a> Default for EncounterNest8Args<'a> {
        #[inline]
        fn default() -> Self {
            EncounterNest8Args {
                entry_index: 0,
                species: 0,
                alt_form: 0,
                level_table_id: 0,
                ability: 0,
                is_gigantamax: false,
                drop_table_id: 0,
                bonus_table_id: 0,
                probabilities: None,
                gender: 0,
                flawless_ivs: 0,
            }
        }
    }

    pub struct EncounterNest8Builder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> EncounterNest8Builder<'a, 'b> {
        #[inline]
        pub fn add_entry_index(&mut self, entry_index: u32) {
            self.fbb_
                .push_slot::<u32>(EncounterNest8::VT_ENTRY_INDEX, entry_index, 0);
        }
        #[inline]
        pub fn add_species(&mut self, species: u32) {
            self.fbb_
                .push_slot::<u32>(EncounterNest8::VT_SPECIES, species, 0);
        }
        #[inline]
        pub fn add_alt_form(&mut self, alt_form: u32) {
            self.fbb_
                .push_slot::<u32>(EncounterNest8::VT_ALT_FORM, alt_form, 0);
        }
        #[inline]
        pub fn add_level_table_id(&mut self, level_table_id: u64) {
            self.fbb_
                .push_slot::<u64>(EncounterNest8::VT_LEVEL_TABLE_ID, level_table_id, 0);
        }
        #[inline]
        pub fn add_ability(&mut self, ability: i8) {
            self.fbb_
                .push_slot::<i8>(EncounterNest8::VT_ABILITY, ability, 0);
        }
        #[inline]
        pub fn add_is_gigantamax(&mut self, is_gigantamax: bool) {
            self.fbb_
                .push_slot::<bool>(EncounterNest8::VT_IS_GIGANTAMAX, is_gigantamax, false);
        }
        #[inline]
        pub fn add_drop_table_id(&mut self, drop_table_id: u64) {
            self.fbb_
                .push_slot::<u64>(EncounterNest8::VT_DROP_TABLE_ID, drop_table_id, 0);
        }
        #[inline]
        pub fn add_bonus_table_id(&mut self, bonus_table_id: u64) {
            self.fbb_
                .push_slot::<u64>(EncounterNest8::VT_BONUS_TABLE_ID, bonus_table_id, 0);
        }
        #[inline]
        pub fn add_probabilities(
            &mut self,
            probabilities: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u32>>,
        ) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
                EncounterNest8::VT_PROBABILITIES,
                probabilities,
            );
        }
        #[inline]
        pub fn add_gender(&mut self, gender: i8) {
            self.fbb_
                .push_slot::<i8>(EncounterNest8::VT_GENDER, gender, 0);
        }
        #[inline]
        pub fn add_flawless_ivs(&mut self, flawless_ivs: i8) {
            self.fbb_
                .push_slot::<i8>(EncounterNest8::VT_FLAWLESS_IVS, flawless_ivs, 0);
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        ) -> EncounterNest8Builder<'a, 'b> {
            let start = _fbb.start_table();
            EncounterNest8Builder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<EncounterNest8<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for EncounterNest8<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("EncounterNest8");
            ds.field("entry_index", &self.entry_index());
            ds.field("species", &self.species());
            ds.field("alt_form", &self.alt_form());
            ds.field("level_table_id", &self.level_table_id());
            ds.field("ability", &self.ability());
            ds.field("is_gigantamax", &self.is_gigantamax());
            ds.field("drop_table_id", &self.drop_table_id());
            ds.field("bonus_table_id", &self.bonus_table_id());
            ds.field("probabilities", &self.probabilities());
            ds.field("gender", &self.gender());
            ds.field("flawless_ivs", &self.flawless_ivs());
            ds.finish()
        }
    }
    #[inline]
    #[deprecated(since = "2.0.0", note = "Deprecated in favor of `root_as...` methods.")]
    pub fn get_root_as_encounter_nest_8archive<'a>(buf: &'a [u8]) -> EncounterNest8Archive<'a> {
        unsafe { flatbuffers::root_unchecked::<EncounterNest8Archive<'a>>(buf) }
    }

    #[inline]
    #[deprecated(since = "2.0.0", note = "Deprecated in favor of `root_as...` methods.")]
    pub fn get_size_prefixed_root_as_encounter_nest_8archive<'a>(
        buf: &'a [u8],
    ) -> EncounterNest8Archive<'a> {
        unsafe { flatbuffers::size_prefixed_root_unchecked::<EncounterNest8Archive<'a>>(buf) }
    }

    #[inline]
    /// Verifies that a buffer of bytes contains a `EncounterNest8Archive`
    /// and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_encounter_nest_8archive_unchecked`.
    pub fn root_as_encounter_nest_8archive(
        buf: &[u8],
    ) -> Result<EncounterNest8Archive, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root::<EncounterNest8Archive>(buf)
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a size prefixed
    /// `EncounterNest8Archive` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `size_prefixed_root_as_encounter_nest_8archive_unchecked`.
    pub fn size_prefixed_root_as_encounter_nest_8archive(
        buf: &[u8],
    ) -> Result<EncounterNest8Archive, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root::<EncounterNest8Archive>(buf)
    }
    #[inline]
    /// Verifies, with the given options, that a buffer of bytes
    /// contains a `EncounterNest8Archive` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_encounter_nest_8archive_unchecked`.
    pub fn root_as_encounter_nest_8archive_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<EncounterNest8Archive<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root_with_opts::<EncounterNest8Archive<'b>>(opts, buf)
    }
    #[inline]
    /// Verifies, with the given verifier options, that a buffer of
    /// bytes contains a size prefixed `EncounterNest8Archive` and returns
    /// it. Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_encounter_nest_8archive_unchecked`.
    pub fn size_prefixed_root_as_encounter_nest_8archive_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<EncounterNest8Archive<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root_with_opts::<EncounterNest8Archive<'b>>(opts, buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a EncounterNest8Archive and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid `EncounterNest8Archive`.
    pub unsafe fn root_as_encounter_nest_8archive_unchecked(buf: &[u8]) -> EncounterNest8Archive {
        flatbuffers::root_unchecked::<EncounterNest8Archive>(buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a size prefixed EncounterNest8Archive and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid size prefixed `EncounterNest8Archive`.
    pub unsafe fn size_prefixed_root_as_encounter_nest_8archive_unchecked(
        buf: &[u8],
    ) -> EncounterNest8Archive {
        flatbuffers::size_prefixed_root_unchecked::<EncounterNest8Archive>(buf)
    }
    pub const ENCOUNTER_NEST_8ARCHIVE_EXTENSION: &str = "bin";

    #[inline]
    pub fn finish_encounter_nest_8archive_buffer<'a, 'b>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        root: flatbuffers::WIPOffset<EncounterNest8Archive<'a>>,
    ) {
        fbb.finish(root, None);
    }

    #[inline]
    pub fn finish_size_prefixed_encounter_nest_8archive_buffer<'a, 'b>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        root: flatbuffers::WIPOffset<EncounterNest8Archive<'a>>,
    ) {
        fbb.finish_size_prefixed(root, None);
    }
} // pub mod structure
