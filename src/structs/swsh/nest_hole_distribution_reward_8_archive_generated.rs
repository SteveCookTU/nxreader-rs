// automatically generated by the FlatBuffers compiler, do not modify

extern crate flatbuffers;

#[allow(unused_imports, dead_code)]
pub mod structure {
    use std::cmp::Ordering;
    use std::mem;

    extern crate flatbuffers;

    use self::flatbuffers::{EndianScalar, Follow};

    pub enum NestHoleDistributionReward8ArchiveOffset {}

    #[derive(Copy, Clone, PartialEq)]
    pub struct NestHoleDistributionReward8Archive<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> Follow<'a> for NestHoleDistributionReward8Archive<'a> {
        type Inner = NestHoleDistributionReward8Archive<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> NestHoleDistributionReward8Archive<'a> {
        pub const VT_TABLES: flatbuffers::VOffsetT = 4;

        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            NestHoleDistributionReward8Archive { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args NestHoleDistributionReward8ArchiveArgs<'args>,
        ) -> flatbuffers::WIPOffset<NestHoleDistributionReward8Archive<'bldr>> {
            let mut builder = NestHoleDistributionReward8ArchiveBuilder::new(_fbb);
            if let Some(x) = args.tables {
                builder.add_tables(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn tables(
            &self,
        ) -> Option<
            flatbuffers::Vector<
                'a,
                flatbuffers::ForwardsUOffset<NestHoleDistributionReward8Table<'a>>,
            >,
        > {
            self._tab.get::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<
                    'a,
                    flatbuffers::ForwardsUOffset<NestHoleDistributionReward8Table>,
                >,
            >>(NestHoleDistributionReward8Archive::VT_TABLES, None)
        }
    }

    impl flatbuffers::Verifiable for NestHoleDistributionReward8Archive<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<
                    flatbuffers::Vector<
                        '_,
                        flatbuffers::ForwardsUOffset<NestHoleDistributionReward8Table>,
                    >,
                >>("tables", Self::VT_TABLES, false)?
                .finish();
            Ok(())
        }
    }

    #[derive(Default)]
    pub struct NestHoleDistributionReward8ArchiveArgs<'a> {
        pub tables: Option<
            flatbuffers::WIPOffset<
                flatbuffers::Vector<
                    'a,
                    flatbuffers::ForwardsUOffset<NestHoleDistributionReward8Table<'a>>,
                >,
            >,
        >,
    }

    pub struct NestHoleDistributionReward8ArchiveBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }

    impl<'a: 'b, 'b> NestHoleDistributionReward8ArchiveBuilder<'a, 'b> {
        #[inline]
        pub fn add_tables(
            &mut self,
            tables: flatbuffers::WIPOffset<
                flatbuffers::Vector<
                    'b,
                    flatbuffers::ForwardsUOffset<NestHoleDistributionReward8Table<'b>>,
                >,
            >,
        ) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
                NestHoleDistributionReward8Archive::VT_TABLES,
                tables,
            );
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        ) -> NestHoleDistributionReward8ArchiveBuilder<'a, 'b> {
            let start = _fbb.start_table();
            NestHoleDistributionReward8ArchiveBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<NestHoleDistributionReward8Archive<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for NestHoleDistributionReward8Archive<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("NestHoleDistributionReward8Archive");
            ds.field("tables", &self.tables());
            ds.finish()
        }
    }

    pub enum NestHoleDistributionReward8TableOffset {}

    #[derive(Copy, Clone, PartialEq)]
    pub struct NestHoleDistributionReward8Table<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> Follow<'a> for NestHoleDistributionReward8Table<'a> {
        type Inner = NestHoleDistributionReward8Table<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> NestHoleDistributionReward8Table<'a> {
        pub const VT_TABLE_ID: flatbuffers::VOffsetT = 4;
        pub const VT_ENTRIES: flatbuffers::VOffsetT = 6;

        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            NestHoleDistributionReward8Table { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args NestHoleDistributionReward8TableArgs<'args>,
        ) -> flatbuffers::WIPOffset<NestHoleDistributionReward8Table<'bldr>> {
            let mut builder = NestHoleDistributionReward8TableBuilder::new(_fbb);
            builder.add_table_id(args.table_id);
            if let Some(x) = args.entries {
                builder.add_entries(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn table_id(&self) -> u64 {
            self._tab
                .get::<u64>(NestHoleDistributionReward8Table::VT_TABLE_ID, Some(0))
                .unwrap()
        }
        #[inline]
        pub fn entries(
            &self,
        ) -> Option<
            flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<NestHoleDistributionReward8<'a>>>,
        > {
            self._tab.get::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<NestHoleDistributionReward8>>,
            >>(NestHoleDistributionReward8Table::VT_ENTRIES, None)
        }
    }

    impl flatbuffers::Verifiable for NestHoleDistributionReward8Table<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<u64>("table_id", Self::VT_TABLE_ID, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<
                    flatbuffers::Vector<
                        '_,
                        flatbuffers::ForwardsUOffset<NestHoleDistributionReward8>,
                    >,
                >>("entries", Self::VT_ENTRIES, false)?
                .finish();
            Ok(())
        }
    }

    #[derive(Default)]
    pub struct NestHoleDistributionReward8TableArgs<'a> {
        pub table_id: u64,
        pub entries: Option<
            flatbuffers::WIPOffset<
                flatbuffers::Vector<
                    'a,
                    flatbuffers::ForwardsUOffset<NestHoleDistributionReward8<'a>>,
                >,
            >,
        >,
    }

    pub struct NestHoleDistributionReward8TableBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }

    impl<'a: 'b, 'b> NestHoleDistributionReward8TableBuilder<'a, 'b> {
        #[inline]
        pub fn add_table_id(&mut self, table_id: u64) {
            self.fbb_
                .push_slot::<u64>(NestHoleDistributionReward8Table::VT_TABLE_ID, table_id, 0);
        }
        #[inline]
        pub fn add_entries(
            &mut self,
            entries: flatbuffers::WIPOffset<
                flatbuffers::Vector<
                    'b,
                    flatbuffers::ForwardsUOffset<NestHoleDistributionReward8<'b>>,
                >,
            >,
        ) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
                NestHoleDistributionReward8Table::VT_ENTRIES,
                entries,
            );
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        ) -> NestHoleDistributionReward8TableBuilder<'a, 'b> {
            let start = _fbb.start_table();
            NestHoleDistributionReward8TableBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<NestHoleDistributionReward8Table<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for NestHoleDistributionReward8Table<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("NestHoleDistributionReward8Table");
            ds.field("table_id", &self.table_id());
            ds.field("entries", &self.entries());
            ds.finish()
        }
    }

    pub enum NestHoleDistributionReward8Offset {}

    #[derive(Copy, Clone, PartialEq)]
    pub struct NestHoleDistributionReward8<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> Follow<'a> for NestHoleDistributionReward8<'a> {
        type Inner = NestHoleDistributionReward8<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> NestHoleDistributionReward8<'a> {
        pub const VT_VALUE_0: flatbuffers::VOffsetT = 4;
        pub const VT_VALUE_1: flatbuffers::VOffsetT = 6;
        pub const VT_VALUE_2: flatbuffers::VOffsetT = 8;
        pub const VT_VALUE_3: flatbuffers::VOffsetT = 10;
        pub const VT_VALUE_4: flatbuffers::VOffsetT = 12;
        pub const VT_ITEM_ID: flatbuffers::VOffsetT = 14;

        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            NestHoleDistributionReward8 { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args NestHoleDistributionReward8Args,
        ) -> flatbuffers::WIPOffset<NestHoleDistributionReward8<'bldr>> {
            let mut builder = NestHoleDistributionReward8Builder::new(_fbb);
            builder.add_item_id(args.item_id);
            builder.add_value_4(args.value_4);
            builder.add_value_3(args.value_3);
            builder.add_value_2(args.value_2);
            builder.add_value_1(args.value_1);
            builder.add_value_0(args.value_0);
            builder.finish()
        }

        #[inline]
        pub fn value_0(&self) -> i8 {
            self._tab
                .get::<i8>(NestHoleDistributionReward8::VT_VALUE_0, Some(0))
                .unwrap()
        }
        #[inline]
        pub fn value_1(&self) -> i8 {
            self._tab
                .get::<i8>(NestHoleDistributionReward8::VT_VALUE_1, Some(0))
                .unwrap()
        }
        #[inline]
        pub fn value_2(&self) -> i8 {
            self._tab
                .get::<i8>(NestHoleDistributionReward8::VT_VALUE_2, Some(0))
                .unwrap()
        }
        #[inline]
        pub fn value_3(&self) -> i8 {
            self._tab
                .get::<i8>(NestHoleDistributionReward8::VT_VALUE_3, Some(0))
                .unwrap()
        }
        #[inline]
        pub fn value_4(&self) -> i8 {
            self._tab
                .get::<i8>(NestHoleDistributionReward8::VT_VALUE_4, Some(0))
                .unwrap()
        }
        #[inline]
        pub fn item_id(&self) -> u16 {
            self._tab
                .get::<u16>(NestHoleDistributionReward8::VT_ITEM_ID, Some(0))
                .unwrap()
        }
    }

    impl flatbuffers::Verifiable for NestHoleDistributionReward8<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<i8>("value_0", Self::VT_VALUE_0, false)?
                .visit_field::<i8>("value_1", Self::VT_VALUE_1, false)?
                .visit_field::<i8>("value_2", Self::VT_VALUE_2, false)?
                .visit_field::<i8>("value_3", Self::VT_VALUE_3, false)?
                .visit_field::<i8>("value_4", Self::VT_VALUE_4, false)?
                .visit_field::<u16>("item_id", Self::VT_ITEM_ID, false)?
                .finish();
            Ok(())
        }
    }

    #[derive(Default)]
    pub struct NestHoleDistributionReward8Args {
        pub value_0: i8,
        pub value_1: i8,
        pub value_2: i8,
        pub value_3: i8,
        pub value_4: i8,
        pub item_id: u16,
    }

    pub struct NestHoleDistributionReward8Builder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }

    impl<'a: 'b, 'b> NestHoleDistributionReward8Builder<'a, 'b> {
        #[inline]
        pub fn add_value_0(&mut self, value_0: i8) {
            self.fbb_
                .push_slot::<i8>(NestHoleDistributionReward8::VT_VALUE_0, value_0, 0);
        }
        #[inline]
        pub fn add_value_1(&mut self, value_1: i8) {
            self.fbb_
                .push_slot::<i8>(NestHoleDistributionReward8::VT_VALUE_1, value_1, 0);
        }
        #[inline]
        pub fn add_value_2(&mut self, value_2: i8) {
            self.fbb_
                .push_slot::<i8>(NestHoleDistributionReward8::VT_VALUE_2, value_2, 0);
        }
        #[inline]
        pub fn add_value_3(&mut self, value_3: i8) {
            self.fbb_
                .push_slot::<i8>(NestHoleDistributionReward8::VT_VALUE_3, value_3, 0);
        }
        #[inline]
        pub fn add_value_4(&mut self, value_4: i8) {
            self.fbb_
                .push_slot::<i8>(NestHoleDistributionReward8::VT_VALUE_4, value_4, 0);
        }
        #[inline]
        pub fn add_item_id(&mut self, item_id: u16) {
            self.fbb_
                .push_slot::<u16>(NestHoleDistributionReward8::VT_ITEM_ID, item_id, 0);
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        ) -> NestHoleDistributionReward8Builder<'a, 'b> {
            let start = _fbb.start_table();
            NestHoleDistributionReward8Builder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<NestHoleDistributionReward8<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for NestHoleDistributionReward8<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("NestHoleDistributionReward8");
            ds.field("value_0", &self.value_0());
            ds.field("value_1", &self.value_1());
            ds.field("value_2", &self.value_2());
            ds.field("value_3", &self.value_3());
            ds.field("value_4", &self.value_4());
            ds.field("item_id", &self.item_id());
            ds.finish()
        }
    }

    #[inline]
    #[deprecated(since = "2.0.0", note = "Deprecated in favor of `root_as...` methods.")]
    pub fn get_root_as_nest_hole_distribution_reward_8archive<'a>(
        buf: &'a [u8],
    ) -> NestHoleDistributionReward8Archive<'a> {
        unsafe { flatbuffers::root_unchecked::<NestHoleDistributionReward8Archive<'a>>(buf) }
    }

    #[inline]
    #[deprecated(since = "2.0.0", note = "Deprecated in favor of `root_as...` methods.")]
    pub fn get_size_prefixed_root_as_nest_hole_distribution_reward_8archive<'a>(
        buf: &'a [u8],
    ) -> NestHoleDistributionReward8Archive<'a> {
        unsafe {
            flatbuffers::size_prefixed_root_unchecked::<NestHoleDistributionReward8Archive<'a>>(buf)
        }
    }

    #[inline]
    /// Verifies that a buffer of bytes contains a `NestHoleDistributionReward8Archive`
    /// and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_nest_hole_distribution_reward_8archive_unchecked`.
    pub fn root_as_nest_hole_distribution_reward_8archive(
        buf: &[u8],
    ) -> Result<NestHoleDistributionReward8Archive, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root::<NestHoleDistributionReward8Archive>(buf)
    }

    #[inline]
    /// Verifies that a buffer of bytes contains a size prefixed
    /// `NestHoleDistributionReward8Archive` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `size_prefixed_root_as_nest_hole_distribution_reward_8archive_unchecked`.
    pub fn size_prefixed_root_as_nest_hole_distribution_reward_8archive(
        buf: &[u8],
    ) -> Result<NestHoleDistributionReward8Archive, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root::<NestHoleDistributionReward8Archive>(buf)
    }

    #[inline]
    /// Verifies, with the given options, that a buffer of bytes
    /// contains a `NestHoleDistributionReward8Archive` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_nest_hole_distribution_reward_8archive_unchecked`.
    pub fn root_as_nest_hole_distribution_reward_8archive_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<NestHoleDistributionReward8Archive<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root_with_opts::<NestHoleDistributionReward8Archive<'b>>(opts, buf)
    }

    #[inline]
    /// Verifies, with the given verifier options, that a buffer of
    /// bytes contains a size prefixed `NestHoleDistributionReward8Archive` and returns
    /// it. Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_nest_hole_distribution_reward_8archive_unchecked`.
    pub fn size_prefixed_root_as_nest_hole_distribution_reward_8archive_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<NestHoleDistributionReward8Archive<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root_with_opts::<NestHoleDistributionReward8Archive<'b>>(
            opts, buf,
        )
    }

    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a NestHoleDistributionReward8Archive and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid `NestHoleDistributionReward8Archive`.
    pub unsafe fn root_as_nest_hole_distribution_reward_8archive_unchecked(
        buf: &[u8],
    ) -> NestHoleDistributionReward8Archive {
        flatbuffers::root_unchecked::<NestHoleDistributionReward8Archive>(buf)
    }

    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a size prefixed NestHoleDistributionReward8Archive and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid size prefixed `NestHoleDistributionReward8Archive`.
    pub unsafe fn size_prefixed_root_as_nest_hole_distribution_reward_8archive_unchecked(
        buf: &[u8],
    ) -> NestHoleDistributionReward8Archive {
        flatbuffers::size_prefixed_root_unchecked::<NestHoleDistributionReward8Archive>(buf)
    }

    pub const NEST_HOLE_DISTRIBUTION_REWARD_8ARCHIVE_EXTENSION: &str = "bin";

    #[inline]
    pub fn finish_nest_hole_distribution_reward_8archive_buffer<'a, 'b>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        root: flatbuffers::WIPOffset<NestHoleDistributionReward8Archive<'a>>,
    ) {
        fbb.finish(root, None);
    }

    #[inline]
    pub fn finish_size_prefixed_nest_hole_distribution_reward_8archive_buffer<'a, 'b>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        root: flatbuffers::WIPOffset<NestHoleDistributionReward8Archive<'a>>,
    ) {
        fbb.finish_size_prefixed(root, None);
    }
} // pub mod structure
