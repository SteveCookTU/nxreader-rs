// automatically generated by the FlatBuffers compiler, do not modify

extern crate flatbuffers;

#[allow(unused_imports, dead_code)]
pub mod structure {

    use std::cmp::Ordering;
    use std::mem;

    extern crate flatbuffers;
    use self::flatbuffers::{EndianScalar, Follow};

    pub enum NestHoleReward8ArchiveOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct NestHoleReward8Archive<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> Follow<'a> for NestHoleReward8Archive<'a> {
        type Inner = NestHoleReward8Archive<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> NestHoleReward8Archive<'a> {
        pub const VT_TABLES: flatbuffers::VOffsetT = 4;

        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            NestHoleReward8Archive { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args NestHoleReward8ArchiveArgs<'args>,
        ) -> flatbuffers::WIPOffset<NestHoleReward8Archive<'bldr>> {
            let mut builder = NestHoleReward8ArchiveBuilder::new(_fbb);
            if let Some(x) = args.tables {
                builder.add_tables(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn tables(
            &self,
        ) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<NestHoleReward8Table<'a>>>>
        {
            self._tab.get::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<NestHoleReward8Table>>,
            >>(NestHoleReward8Archive::VT_TABLES, None)
        }
    }

    impl flatbuffers::Verifiable for NestHoleReward8Archive<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<
                    flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<NestHoleReward8Table>>,
                >>("tables", Self::VT_TABLES, false)?
                .finish();
            Ok(())
        }
    }

    #[derive(Default)]
    pub struct NestHoleReward8ArchiveArgs<'a> {
        pub tables: Option<
            flatbuffers::WIPOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<NestHoleReward8Table<'a>>>,
            >,
        >,
    }

    pub struct NestHoleReward8ArchiveBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> NestHoleReward8ArchiveBuilder<'a, 'b> {
        #[inline]
        pub fn add_tables(
            &mut self,
            tables: flatbuffers::WIPOffset<
                flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<NestHoleReward8Table<'b>>>,
            >,
        ) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
                NestHoleReward8Archive::VT_TABLES,
                tables,
            );
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        ) -> NestHoleReward8ArchiveBuilder<'a, 'b> {
            let start = _fbb.start_table();
            NestHoleReward8ArchiveBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<NestHoleReward8Archive<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for NestHoleReward8Archive<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("NestHoleReward8Archive");
            ds.field("tables", &self.tables());
            ds.finish()
        }
    }
    pub enum NestHoleReward8TableOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct NestHoleReward8Table<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> Follow<'a> for NestHoleReward8Table<'a> {
        type Inner = NestHoleReward8Table<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> NestHoleReward8Table<'a> {
        pub const VT_TABLE_ID: flatbuffers::VOffsetT = 4;
        pub const VT_ENTRIES: flatbuffers::VOffsetT = 6;

        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            NestHoleReward8Table { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args NestHoleReward8TableArgs<'args>,
        ) -> flatbuffers::WIPOffset<NestHoleReward8Table<'bldr>> {
            let mut builder = NestHoleReward8TableBuilder::new(_fbb);
            builder.add_table_id(args.table_id);
            if let Some(x) = args.entries {
                builder.add_entries(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn table_id(&self) -> u64 {
            self._tab
                .get::<u64>(NestHoleReward8Table::VT_TABLE_ID, Some(0))
                .unwrap()
        }
        #[inline]
        pub fn entries(
            &self,
        ) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<NestHoleReward8<'a>>>>
        {
            self._tab.get::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<NestHoleReward8>>,
            >>(NestHoleReward8Table::VT_ENTRIES, None)
        }
    }

    impl flatbuffers::Verifiable for NestHoleReward8Table<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<u64>("table_id", Self::VT_TABLE_ID, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<
                    flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<NestHoleReward8>>,
                >>("entries", Self::VT_ENTRIES, false)?
                .finish();
            Ok(())
        }
    }

    #[derive(Default)]
    pub struct NestHoleReward8TableArgs<'a> {
        pub table_id: u64,
        pub entries: Option<
            flatbuffers::WIPOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<NestHoleReward8<'a>>>,
            >,
        >,
    }

    pub struct NestHoleReward8TableBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> NestHoleReward8TableBuilder<'a, 'b> {
        #[inline]
        pub fn add_table_id(&mut self, table_id: u64) {
            self.fbb_
                .push_slot::<u64>(NestHoleReward8Table::VT_TABLE_ID, table_id, 0);
        }
        #[inline]
        pub fn add_entries(
            &mut self,
            entries: flatbuffers::WIPOffset<
                flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<NestHoleReward8<'b>>>,
            >,
        ) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
                NestHoleReward8Table::VT_ENTRIES,
                entries,
            );
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        ) -> NestHoleReward8TableBuilder<'a, 'b> {
            let start = _fbb.start_table();
            NestHoleReward8TableBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<NestHoleReward8Table<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for NestHoleReward8Table<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("NestHoleReward8Table");
            ds.field("table_id", &self.table_id());
            ds.field("entries", &self.entries());
            ds.finish()
        }
    }
    pub enum NestHoleReward8Offset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct NestHoleReward8<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> Follow<'a> for NestHoleReward8<'a> {
        type Inner = NestHoleReward8<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> NestHoleReward8<'a> {
        pub const VT_ENTRY_ID: flatbuffers::VOffsetT = 4;
        pub const VT_ITEM_ID: flatbuffers::VOffsetT = 6;
        pub const VT_VALUES: flatbuffers::VOffsetT = 8;

        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            NestHoleReward8 { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args NestHoleReward8Args<'args>,
        ) -> flatbuffers::WIPOffset<NestHoleReward8<'bldr>> {
            let mut builder = NestHoleReward8Builder::new(_fbb);
            if let Some(x) = args.values {
                builder.add_values(x);
            }
            builder.add_item_id(args.item_id);
            builder.add_entry_id(args.entry_id);
            builder.finish()
        }

        #[inline]
        pub fn entry_id(&self) -> u32 {
            self._tab
                .get::<u32>(NestHoleReward8::VT_ENTRY_ID, Some(0))
                .unwrap()
        }
        #[inline]
        pub fn item_id(&self) -> u32 {
            self._tab
                .get::<u32>(NestHoleReward8::VT_ITEM_ID, Some(0))
                .unwrap()
        }
        #[inline]
        pub fn values(&self) -> Option<flatbuffers::Vector<'a, u32>> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u32>>>(
                    NestHoleReward8::VT_VALUES,
                    None,
                )
        }
    }

    impl flatbuffers::Verifiable for NestHoleReward8<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<u32>("entry_id", Self::VT_ENTRY_ID, false)?
                .visit_field::<u32>("item_id", Self::VT_ITEM_ID, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u32>>>(
                    "values",
                    Self::VT_VALUES,
                    false,
                )?
                .finish();
            Ok(())
        }
    }

    #[derive(Default)]
    pub struct NestHoleReward8Args<'a> {
        pub entry_id: u32,
        pub item_id: u32,
        pub values: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u32>>>,
    }

    pub struct NestHoleReward8Builder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> NestHoleReward8Builder<'a, 'b> {
        #[inline]
        pub fn add_entry_id(&mut self, entry_id: u32) {
            self.fbb_
                .push_slot::<u32>(NestHoleReward8::VT_ENTRY_ID, entry_id, 0);
        }
        #[inline]
        pub fn add_item_id(&mut self, item_id: u32) {
            self.fbb_
                .push_slot::<u32>(NestHoleReward8::VT_ITEM_ID, item_id, 0);
        }
        #[inline]
        pub fn add_values(&mut self, values: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u32>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(NestHoleReward8::VT_VALUES, values);
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        ) -> NestHoleReward8Builder<'a, 'b> {
            let start = _fbb.start_table();
            NestHoleReward8Builder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<NestHoleReward8<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for NestHoleReward8<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("NestHoleReward8");
            ds.field("entry_id", &self.entry_id());
            ds.field("item_id", &self.item_id());
            ds.field("values", &self.values());
            ds.finish()
        }
    }
    #[inline]
    #[deprecated(since = "2.0.0", note = "Deprecated in favor of `root_as...` methods.")]
    pub fn get_root_as_nest_hole_reward_8archive<'a>(buf: &'a [u8]) -> NestHoleReward8Archive<'a> {
        unsafe { flatbuffers::root_unchecked::<NestHoleReward8Archive<'a>>(buf) }
    }

    #[inline]
    #[deprecated(since = "2.0.0", note = "Deprecated in favor of `root_as...` methods.")]
    pub fn get_size_prefixed_root_as_nest_hole_reward_8archive<'a>(
        buf: &'a [u8],
    ) -> NestHoleReward8Archive<'a> {
        unsafe { flatbuffers::size_prefixed_root_unchecked::<NestHoleReward8Archive<'a>>(buf) }
    }

    #[inline]
    /// Verifies that a buffer of bytes contains a `NestHoleReward8Archive`
    /// and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_nest_hole_reward_8archive_unchecked`.
    pub fn root_as_nest_hole_reward_8archive(
        buf: &[u8],
    ) -> Result<NestHoleReward8Archive, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root::<NestHoleReward8Archive>(buf)
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a size prefixed
    /// `NestHoleReward8Archive` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `size_prefixed_root_as_nest_hole_reward_8archive_unchecked`.
    pub fn size_prefixed_root_as_nest_hole_reward_8archive(
        buf: &[u8],
    ) -> Result<NestHoleReward8Archive, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root::<NestHoleReward8Archive>(buf)
    }
    #[inline]
    /// Verifies, with the given options, that a buffer of bytes
    /// contains a `NestHoleReward8Archive` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_nest_hole_reward_8archive_unchecked`.
    pub fn root_as_nest_hole_reward_8archive_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<NestHoleReward8Archive<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root_with_opts::<NestHoleReward8Archive<'b>>(opts, buf)
    }
    #[inline]
    /// Verifies, with the given verifier options, that a buffer of
    /// bytes contains a size prefixed `NestHoleReward8Archive` and returns
    /// it. Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_nest_hole_reward_8archive_unchecked`.
    pub fn size_prefixed_root_as_nest_hole_reward_8archive_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<NestHoleReward8Archive<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root_with_opts::<NestHoleReward8Archive<'b>>(opts, buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a NestHoleReward8Archive and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid `NestHoleReward8Archive`.
    pub unsafe fn root_as_nest_hole_reward_8archive_unchecked(
        buf: &[u8],
    ) -> NestHoleReward8Archive {
        flatbuffers::root_unchecked::<NestHoleReward8Archive>(buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a size prefixed NestHoleReward8Archive and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid size prefixed `NestHoleReward8Archive`.
    pub unsafe fn size_prefixed_root_as_nest_hole_reward_8archive_unchecked(
        buf: &[u8],
    ) -> NestHoleReward8Archive {
        flatbuffers::size_prefixed_root_unchecked::<NestHoleReward8Archive>(buf)
    }
    pub const NEST_HOLE_REWARD_8ARCHIVE_EXTENSION: &str = "bin";

    #[inline]
    pub fn finish_nest_hole_reward_8archive_buffer<'a, 'b>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        root: flatbuffers::WIPOffset<NestHoleReward8Archive<'a>>,
    ) {
        fbb.finish(root, None);
    }

    #[inline]
    pub fn finish_size_prefixed_nest_hole_reward_8archive_buffer<'a, 'b>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        root: flatbuffers::WIPOffset<NestHoleReward8Archive<'a>>,
    ) {
        fbb.finish_size_prefixed(root, None);
    }
} // pub mod structure
